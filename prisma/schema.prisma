// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  password      String
  contas        Conta[]
  receitas      Receita[]
  reservas      Reserva[]
  categorias    Categoria[]
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Conta {
  id             String     @id @default(cuid())
  descricao      String
  valor          Decimal    @db.Decimal(10,2)
  categoriaId    String
  categoria      Categoria  @relation(fields: [categoriaId], references: [id])
  dataVencimento DateTime
  pago           Boolean    @default(false)
  dataPagamento  DateTime?
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  reservas       Reserva[]
  createdAt      DateTime   @default(now())
}

model Receita {
  id              String     @id @default(cuid())
  descricao       String
  valor           Decimal    @db.Decimal(10,2)
  categoriaId     String
  categoria       Categoria  @relation(fields: [categoriaId], references: [id])
  dataRecebimento DateTime
  userId          String
  user            User       @relation(fields: [userId], references: [id])
  createdAt       DateTime   @default(now())
}

model Reserva {
  id        String   @id @default(cuid())
  descricao String
  valor     Decimal  @db.Decimal(10,2)
  data      DateTime
  contaId   String
  conta     Conta    @relation(fields: [contaId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Categoria {
  id       String     @id @default(cuid())
  nome     String
  tipo     TipoCategoria
  userId   String
  user     User       @relation(fields: [userId], references: [id])
  contas   Conta[]
  receitas Receita[]

  @@unique([nome, userId], name: "nome_userId")

}

enum TipoCategoria {
  CONTA
  RECEITA
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
